openapi: 3.1.0
info:
  title: Waternity API
  description: |
    Decentralized water well management and tokenization platform on Hedera Hashgraph.
    
    ## Features
    - **Authentication**: Email/password login with Hedera wallet integration
    - **HCS Events**: Publish and retrieve consensus events
    - **Settlement Management**: Revenue calculation and distribution
    - **Document Anchoring**: Immutable document verification on Hedera
    - **Well Management**: Water well operations and monitoring
    
    ## Error Handling
    All endpoints return consistent error responses with the shape `{ error, message? }`.
    
    ## Idempotency
    Write operations support idempotency via the `Idempotency-Key` header.
  version: 1.0.0
  contact:
    name: Waternity Team
    url: https://waternity.io
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000
    description: Development server
  - url: https://waternity.io
    description: Production server

paths:
  # Authentication Endpoints
  /api/auth/login:
    post:
      operationId: loginUser
      summary: User login
      description: Authenticate user with email and password
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                  example: "operator@waternity.io"
                password:
                  type: string
                  format: password
                  example: "securePassword123"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/RateLimited'

  /api/auth/logout:
    post:
      operationId: logoutUser
      summary: User logout
      description: Invalidate user session
      tags: [Authentication]
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true

  /api/auth/me:
    get:
      operationId: getCurrentUser
      summary: Get current user
      description: Get current authenticated user information
      tags: [Authentication]
      security:
        - sessionAuth: []
      responses:
        '200':
          description: Current user information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/auth/csrf:
    get:
      operationId: getCsrfToken
      summary: Get CSRF token
      description: Get CSRF token for form submissions
      tags: [Authentication]
      responses:
        '200':
          description: CSRF token
          content:
            application/json:
              schema:
                type: object
                properties:
                  csrfToken:
                    type: string
                    example: "abc123def456"

  # HCS Events
  /api/hcs/events:
    post:
      operationId: publishHcsEvent
      summary: Publish HCS event
      description: Publish event to Hedera Consensus Service
      tags: [HCS]
      security:
        - sessionAuth: []
      parameters:
        - $ref: '#/components/parameters/IdempotencyKey'
        - $ref: '#/components/parameters/CsrfToken'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HcsEventRequest'
      responses:
        '200':
          description: Event published successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HcsEventResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/RateLimited'

  # Wells Management
  /api/wells:
    get:
      operationId: getWells
      summary: Get wells
      description: Get list of water wells
      tags: [Wells]
      security:
        - sessionAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: List of wells
          content:
            application/json:
              schema:
                type: object
                properties:
                  wells:
                    type: array
                    items:
                      $ref: '#/components/schemas/Well'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      operationId: createWell
      summary: Create well
      description: Create a new water well
      tags: [Wells]
      security:
        - sessionAuth: []
      parameters:
        - $ref: '#/components/parameters/IdempotencyKey'
        - $ref: '#/components/parameters/CsrfToken'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWellRequest'
      responses:
        '201':
          description: Well created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Well'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'

  /api/wells/{id}/events:
    get:
      operationId: getWellEvents
      summary: Get well events
      description: Get HCS events for a specific well
      tags: [Wells]
      security:
        - sessionAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: "well_123"
        - name: refresh
          in: query
          schema:
            type: boolean
            default: false
          description: Pull latest events from Mirror Node
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Well events
          content:
            application/json:
              schema:
                type: object
                properties:
                  events:
                    type: array
                    items:
                      $ref: '#/components/schemas/HcsEvent'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  # HTS Tokens
  /api/hts/tokens:
    post:
      operationId: manageHtsTokens
      summary: Create or mint HTS token
      description: Create a new fungible token for a well (default) or mint additional supply when action=mint
      tags: [HTS]
      security:
        - sessionAuth: []
      parameters:
        - $ref: '#/components/parameters/IdempotencyKey'
        - $ref: '#/components/parameters/CsrfToken'
        - name: action
          in: query
          description: Action to perform. Use 'mint' to mint additional supply; omit or set to 'create' to create a token.
          required: false
          schema:
            type: string
            enum: [create, mint]
            default: create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  title: HtsTokenCreateRequest
                  required: [messageId, wellId, name, symbol, decimals, initialSupply]
                  properties:
                    messageId:
                      type: string
                      format: uuid
                      example: "550e8400-e29b-41d4-a716-446655440000"
                    wellId:
                      type: string
                      example: "well_123"
                    name:
                      type: string
                      example: "Water Token"
                    symbol:
                      type: string
                      example: "WTR"
                    decimals:
                      type: integer
                      minimum: 0
                      maximum: 18
                      example: 2
                    initialSupply:
                      type: string
                      pattern: "^\\d+$"
                      example: "1000000"
                - type: object
                  title: HtsMintRequest
                  required: [messageId, tokenId, amount]
                  properties:
                    messageId:
                      type: string
                      format: uuid
                      example: "550e8400-e29b-41d4-a716-446655440000"
                    tokenId:
                      type: string
                      example: "0.0.345678"
                    amount:
                      type: string
                      pattern: "^\\d+$"
                      example: "1000"
      responses:
        '201':
          description: Token created successfully (action=create)
          content:
            application/json:
              schema:
                type: object
                properties:
                  tokenId:
                    type: string
                    example: "0.0.345678"
                  transactionId:
                    type: string
                    example: "0.0.123456@1640995200.123456789"
                  status:
                    type: string
                    example: "SUCCESS"
                  wellId:
                    type: string
                    example: "well_123"
                  tokenName:
                    type: string
                    example: "Water Token"
                  tokenSymbol:
                    type: string
                    example: "WTR"
        '200':
          description: Tokens minted successfully (action=mint)
          content:
            application/json:
              schema:
                type: object
                properties:
                  transactionId:
                    type: string
                    example: "0.0.123456@1640995200.123456789"
                  newTotalSupply:
                    type: string
                    example: "1010000"
                  status:
                    type: string
                    example: "SUCCESS"
                  wellId:
                    type: string
                    nullable: true
                    example: "well_123"
                  tokenId:
                    type: string
                    example: "0.0.345678"
                  amount:
                    type: number
                    example: 1000
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  # Settlements
  /api/settlements/request:
    post:
      operationId: requestSettlement
      summary: Request settlement
      description: Create a new settlement request
      tags: [Settlements]
      security:
        - sessionAuth: []
      parameters:
        - $ref: '#/components/parameters/IdempotencyKey'
        - $ref: '#/components/parameters/CsrfToken'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SettlementRequestBody'
      responses:
        '201':
          description: Settlement requested successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Settlement'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'

  /api/settlements/approve:
    post:
      operationId: approveSettlement
      summary: Approve settlement
      description: Approve a settlement request (OPERATOR/AGENT/ADMIN only)
      tags: [Settlements]
      security:
        - sessionAuth: []
      parameters:
        - $ref: '#/components/parameters/IdempotencyKey'
        - $ref: '#/components/parameters/CsrfToken'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [settlementId]
              properties:
                settlementId:
                  type: string
                  example: "settlement_123"
                notes:
                  type: string
                  example: "Approved after review"
      responses:
        '200':
          description: Settlement approved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Settlement'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'

  /api/settlements/execute:
    post:
      operationId: executeSettlement
      summary: Execute settlement
      description: Execute approved settlement and distribute payouts
      tags: [Settlements]
      security:
        - sessionAuth: []
      parameters:
        - $ref: '#/components/parameters/IdempotencyKey'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [settlementId]
              properties:
                settlementId:
                  type: string
                  example: "settlement_123"
                paymentAsset:
                  type: string
                  enum: [HBAR, TOKEN]
                  default: HBAR
                  example: "HBAR"
      responses:
        '200':
          description: Settlement executed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  settlement:
                    $ref: '#/components/schemas/Settlement'
                  payouts:
                    type: array
                    items:
                      $ref: '#/components/schemas/Payout'
                  transactionId:
                    type: string
                    example: "0.0.123456@1640995200.123456789"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'

  # Documents
  /api/documents/anchor:
    post:
      operationId: anchorDocument
      summary: Anchor document
      description: Anchor document hash to Hedera for immutable proof
      tags: [Documents]
      security:
        - sessionAuth: []
      parameters:
        - $ref: '#/components/parameters/IdempotencyKey'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentAnchorRequest'
      responses:
        '201':
          description: Document anchored successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentAnchorResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '413':
          $ref: '#/components/responses/PayloadTooLarge'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'

  # System
  /api/system/pull-topic:
    post:
      operationId: pullTopicData
      summary: Pull topic events
      description: Pull latest events from Mirror Node for a topic
      tags: [System]
      security:
        - sessionAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [wellId]
              properties:
                wellId:
                  type: string
                  example: "well_123"
                fromTs:
                  type: string
                  format: date-time
                  example: "2024-01-15T10:30:00Z"
      responses:
        '200':
          description: Events pulled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  eventsProcessed:
                    type: integer
                    example: 15
                  lastConsensusTime:
                    type: string
                    format: date-time
                    example: "2024-01-15T10:35:00Z"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  # Dashboard
  /api/dashboard/stats:
    get:
      operationId: getDashboardStats
      summary: Get dashboard statistics
      description: Get key metrics for dashboard
      tags: [Dashboard]
      security:
        - sessionAuth: []
      responses:
        '200':
          description: Dashboard statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardStats'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # Metadata
  /api/meta/links:
    get:
      operationId: getMetaLinks
      summary: Get metadata links
      description: Get HashScan and Mirror Node links for transactions
      tags: [Metadata]
      parameters:
        - name: txId
          in: query
          schema:
            type: string
          example: "0.0.123456@1640995200.123456789"
        - name: topicId
          in: query
          schema:
            type: string
          example: "0.0.789012"
      responses:
        '200':
          description: External links
          content:
            application/json:
              schema:
                type: object
                properties:
                  hashscan:
                    type: string
                    example: "https://hashscan.io/testnet/transaction/0.0.123456@1640995200.123456789"
                  mirror:
                    type: string
                    example: "https://testnet.mirrornode.hedera.com/api/v1/transactions/0.0.123456@1640995200.123456789"

  # Health and Documentation
  /api/health:
    get:
      operationId: getHealthStatus
      summary: Health check
      description: |
        Check API and system health status including:
        - Hedera environment variables (HEDERA_NETWORK, HEDERA_ACCOUNT_ID, HEDERA_PRIVATE_KEY)
        - Hedera SDK initialization capability
        - Database connectivity
        
        Returns 200 with ok:false for missing environment variables.
        Returns 503 for database connectivity issues.
      tags: [System]
      responses:
        '200':
          description: Health check completed (may include issues with environment variables)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
              examples:
                healthy:
                  summary: All systems healthy
                  value:
                    ok: true
                    hedera:
                      env: true
                      network: "testnet"
                      sdkReady: true
                    db:
                      connected: true
                env_issues:
                  summary: Environment variable issues
                  value:
                    ok: false
                    hedera:
                      env: false
                      network: "unknown"
                      sdkReady: false
                    db:
                      connected: true
        '503':
          description: Database connectivity issues
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
              examples:
                db_down:
                  summary: Database connectivity failed
                  value:
                    ok: false
                    hedera:
                      env: true
                      network: "testnet"
                      sdkReady: true
                    db:
                      connected: false

  /api/docs:
    get:
      operationId: getApiDocs
      summary: API Documentation
      description: Get OpenAPI documentation
      tags: [System]
      parameters:
        - name: format
          in: query
          schema:
            type: string
            enum: [html, yaml]
            default: html
          description: Documentation format
      responses:
        '200':
          description: API documentation
          content:
            text/html:
              schema:
                type: string
            text/yaml:
              schema:
                type: string

components:
  securitySchemes:
    sessionAuth:
      type: apiKey
      in: cookie
      name: wty_sess
      description: HTTPOnly session cookie

  parameters:
    IdempotencyKey:
      name: Idempotency-Key
      in: header
      required: false
      schema:
        type: string
        format: uuid
      description: Unique key for idempotent operations
      example: "550e8400-e29b-41d4-a716-446655440000"

    CsrfToken:
      name: X-CSRF-Token
      in: header
      required: true
      schema:
        type: string
      description: CSRF token required by middleware for mutation operations (POST/PUT/PATCH/DELETE). Obtain token from /api/auth/csrf endpoint and include in request header.
      example: "abc123def456ghi789jkl012"

  responses:
    BadRequest:
      description: Bad request - validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "validation_failed"
            message: "Request validation failed"

    Unauthorized:
      description: Unauthorized - authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "unauthorized"
            message: "Authentication required"

    Forbidden:
      description: Forbidden - insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "forbidden"
            message: "Insufficient permissions"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "not_found"
            message: "Resource not found"

    Conflict:
      description: Conflict - resource already exists or idempotency mismatch
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "conflict"
            message: "Resource already exists"

    PayloadTooLarge:
      description: Payload too large
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "payload_too_large"
            message: "Request payload exceeds size limit"

    UnprocessableEntity:
      description: Unprocessable entity - semantic validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "unprocessable_entity"
            message: "Invalid business logic"

    RateLimited:
      description: Rate limit exceeded
      headers:
        Retry-After:
          schema:
            type: integer
          description: Seconds to wait before retrying
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "rate_limit_exceeded"
            message: "Too many requests"

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "internal_server_error"
            message: "An unexpected error occurred"

  schemas:
    # Core Entities
    User:
      type: object
      properties:
        id:
          type: string
          example: "user_123"
        email:
          type: string
          format: email
          example: "operator@waternity.io"
        name:
          type: string
          example: "John Operator"
        role:
          type: object
          properties:
            id:
              type: string
              example: "role_123"
            name:
              type: string
              enum: [INVESTOR, OPERATOR, AGENT, ADMIN]
              example: "OPERATOR"
        hederaAccountId:
          type: string
          nullable: true
          example: "0.0.123456"
        createdAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"

    Well:
      type: object
      properties:
        id:
          type: string
          example: "well_123"
        code:
          type: string
          example: "LGS-001"
        name:
          type: string
          example: "Lagos Community Well"
        location:
          type: string
          example: "Lagos, Nigeria"
        topicId:
          type: string
          example: "0.0.789012"
        tokenId:
          type: string
          nullable: true
          example: "0.0.345678"
        operatorUserId:
          type: string
          example: "user_123"
        createdAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"

    HcsEvent:
      type: object
      properties:
        id:
          type: string
          example: "event_123"
        wellId:
          type: string
          example: "well_123"
        type:
          type: string
          enum: [METER_READING, VALVE_COMMAND, DOC_ANCHORED, SETTLEMENT_REQUESTED, SETTLEMENT_APPROVED, SETTLEMENT_EXECUTED, TOKEN_MINTED, PAYOUT_DISTRIBUTED]
          example: "METER_READING"
        messageId:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        consensusTime:
          type: string
          format: date-time
          nullable: true
          example: "2024-01-15T10:30:00Z"
        sequenceNumber:
          type: integer
          nullable: true
          example: 12345
        txId:
          type: string
          nullable: true
          example: "0.0.123456@1640995200.123456789"
        payloadJson:
          type: object
          example:
            readingId: "reading_123"
            value: 1500
            unit: "kWh"
        createdAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"

    Settlement:
      type: object
      properties:
        id:
          type: string
          example: "settlement_123"
        wellId:
          type: string
          example: "well_123"
        periodStart:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"
        periodEnd:
          type: string
          format: date-time
          example: "2024-01-31T23:59:59Z"
        kwhTotal:
          type: number
          example: 15000
        grossRevenue:
          type: number
          example: 750.50
        status:
          type: string
          enum: [DRAFT, REQUESTED, APPROVED, EXECUTED, FAILED]
          example: "REQUESTED"
        requestEventId:
          type: string
          nullable: true
          example: "event_123"
        approveEventId:
          type: string
          nullable: true
          example: "event_124"
        executeEventId:
          type: string
          nullable: true
          example: "event_125"
        escrowTxId:
          type: string
          nullable: true
          example: "0.0.123456@1640995200.123456789"
        createdAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"

    Payout:
      type: object
      properties:
        id:
          type: string
          example: "payout_123"
        settlementId:
          type: string
          example: "settlement_123"
        recipientAccount:
          type: string
          example: "0.0.123456"
        assetType:
          type: string
          enum: [HBAR, TOKEN]
          example: "HBAR"
        amount:
          type: number
          example: 250.50
        tokenId:
          type: string
          nullable: true
          example: "0.0.345678"
        txId:
          type: string
          nullable: true
          example: "0.0.123456@1640995200.123456789"
        status:
          type: string
          enum: [PENDING, COMPLETED, FAILED]
          example: "COMPLETED"
        createdAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"

    # Request/Response Schemas
    HcsEventRequest:
      type: object
      required: [messageId, wellId, topicId, eventType, payload]
      properties:
        messageId:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        wellId:
          type: string
          example: "well_123"
        topicId:
          type: string
          example: "0.0.789012"
        eventType:
          type: string
          enum: [METER_READING, VALVE_COMMAND, DOC_ANCHORED, SETTLEMENT_REQUESTED, SETTLEMENT_APPROVED, SETTLEMENT_EXECUTED, TOKEN_MINTED, PAYOUT_DISTRIBUTED]
          example: "METER_READING"
        payload:
          type: object
          example:
            readingId: "reading_123"
            value: 1500
            unit: "kWh"
        submittedBy:
          type: string
          enum: [INVESTOR, OPERATOR, AGENT, SYSTEM]
          example: "OPERATOR"
        timestamp:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"

    HcsEventResponse:
      type: object
      properties:
        ack:
          type: boolean
          example: true
        txId:
          type: string
          example: "0.0.123456@1640995200.123456789"
        links:
          type: object
          properties:
            hashscan:
              type: string
              example: "https://hashscan.io/testnet/transaction/0.0.123456@1640995200.123456789"
            mirror:
              type: string
              example: "https://testnet.mirrornode.hedera.com/api/v1/transactions/0.0.123456@1640995200.123456789"

    CreateWellRequest:
      type: object
      required: [messageId, code, name, location, topicId]
      properties:
        messageId:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        code:
          type: string
          example: "LGS-001"
        name:
          type: string
          example: "Lagos Community Well"
        location:
          type: string
          example: "Lagos, Nigeria"
        topicId:
          type: string
          example: "0.0.789012"

    SettlementRequestBody:
      type: object
      required: [messageId, wellId, periodStart, periodEnd, kwhTotal, grossRevenue]
      properties:
        messageId:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        wellId:
          type: string
          example: "well_123"
        periodStart:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"
        periodEnd:
          type: string
          format: date-time
          example: "2024-01-31T23:59:59Z"
        kwhTotal:
          type: number
          minimum: 0
          example: 15000
        grossRevenue:
          type: number
          minimum: 0
          example: 750.50

    DocumentAnchorRequest:
      type: object
      required: [messageId, wellId, type, digestAlgo, digestHex]
      properties:
        messageId:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        wellId:
          type: string
          example: "well_123"
        type:
          type: string
          example: "compliance_report"
        digestAlgo:
          type: string
          enum: [SHA-256, SHA-512]
          example: "SHA-256"
        digestHex:
          type: string
          example: "a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3"
        cid:
          type: string
          nullable: true
          example: "QmYwAPJzv5CZsnA625s3Xf2nemtYgPpHdWEz79ojWnPbdG"
        bundleContentBase64:
          type: string
          nullable: true
          description: Base64 encoded content for large files

    DocumentAnchorResponse:
      type: object
      properties:
        documentId:
          type: string
          example: "doc_123"
        anchorId:
          type: string
          example: "anchor_123"
        txId:
          type: string
          example: "0.0.123456@1640995200.123456789"
        links:
          type: object
          properties:
            hashscan:
              type: string
              example: "https://hashscan.io/testnet/transaction/0.0.123456@1640995200.123456789"
            hfs:
              type: string
              nullable: true
              example: "https://testnet.mirrornode.hedera.com/api/v1/files/0.0.789012"
            ipfs:
              type: string
              nullable: true
              example: "https://ipfs.io/ipfs/QmYwAPJzv5CZsnA625s3Xf2nemtYgPpHdWEz79ojWnPbdG"

    DashboardStats:
      type: object
      properties:
        totalWells:
          type: integer
          example: 25
        activeWells:
          type: integer
          example: 22
        totalRevenue:
          type: number
          example: 15750.50
        totalEvents:
          type: integer
          example: 1250
        pendingSettlements:
          type: integer
          example: 3

    HealthResponse:
      type: object
      required: [ok, hedera, db]
      properties:
        ok:
          type: boolean
          description: Overall system health status
          example: true
        hedera:
          type: object
          required: [env, network, sdkReady]
          properties:
            env:
              type: boolean
              description: Whether required Hedera environment variables are present
              example: true
            network:
              type: string
              enum: [testnet, mainnet, unknown]
              description: Detected Hedera network
              example: "testnet"
            sdkReady:
              type: boolean
              description: Whether Hedera SDK can be initialized successfully
              example: true
        db:
          type: object
          required: [connected]
          properties:
            connected:
              type: boolean
              description: Database connectivity status
              example: true
        uptime:
          type: number
          example: 86400
        memory:
          type: object
          properties:
            used:
              type: number
              example: 512000000
            total:
              type: number
              example: 1073741824
            percentage:
              type: number
              example: 47.7

    Pagination:
      type: object
      properties:
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 10
        total:
          type: integer
          example: 25
        totalPages:
          type: integer
          example: 3

    # Error Response Schema
    ErrorResponse:
      type: object
      required: [error]
      properties:
        error:
          type: string
          example: "validation_failed"
        message:
          type: string
          example: "Request validation failed"

tags:
  - name: Authentication
    description: User authentication and session management
  - name: HCS Events
    description: Hedera Consensus Service event operations
  - name: Wells
    description: Water well management and monitoring
  - name: Settlements
    description: Financial settlement operations
  - name: Documents
    description: Document anchoring and verification
  - name: Dashboard
    description: Dashboard statistics and metrics
  - name: Metadata
    description: External links and metadata
  - name: System
    description: System health and documentation