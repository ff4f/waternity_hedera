openapi: 3.1.0
info:
  title: Waternity Hedera API
  description: |
    Waternity is a decentralized water infrastructure platform built on Hedera Hashgraph.
    This API provides endpoints for authentication, well management, HCS events, settlements,
    document anchoring, and system monitoring.
  version: 1.0.0
  contact:
    name: Waternity Team
    url: https://waternity.io
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000
    description: Development server
  - url: https://api.waternity.io
    description: Production server

security:
  - cookieAuth: []

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: session
      description: Session cookie for authentication

  schemas:
    # HCS Event Schema
    HCSEvent:
      type: object
      properties:
        messageId:
          type: string
          format: uuid
          description: Unique message identifier for idempotency
        wellId:
          type: string
          description: Well identifier
        topicId:
          type: string
          pattern: '^0\.0\.[0-9]+$'
          description: Hedera topic ID
        eventType:
          type: string
          enum: [METER_READING, VALVE_COMMAND, DOC_ANCHORED, SETTLEMENT_REQUESTED, SETTLEMENT_APPROVED, SETTLEMENT_EXECUTED, TOKEN_MINTED, PAYOUT_DISTRIBUTED]
          description: Type of HCS event
        payload:
          type: object
          description: Event-specific payload data
        submittedBy:
          type: string
          pattern: '^0\.0\.[0-9]+$'
          description: Account ID of the event submitter
        submitKey:
          type: string
          description: Submit key for the topic (if required)
        memo:
          type: string
          maxLength: 100
          description: Optional memo for the event
      required: [messageId, wellId, topicId, eventType, payload, submittedBy]
      additionalProperties: false
    
    # Settlement Request Schema
    SettlementRequest:
      type: object
      properties:
        messageId:
          type: string
          format: uuid
          description: Unique message identifier for idempotency
        wellId:
          type: string
          description: Well identifier
        periodStart:
          type: string
          format: date-time
          description: Start of settlement period
        periodEnd:
          type: string
          format: date-time
          description: End of settlement period
        kwhTotal:
          type: number
          minimum: 0
          description: Total kWh generated in the period
        grossRevenue:
          type: number
          minimum: 0
          description: Gross revenue for the period
        payouts:
          type: array
          items:
            type: object
            properties:
              recipientAccount:
                type: string
                pattern: '^0\.0\.[0-9]+$'
                description: Hedera account ID of recipient
              assetType:
                type: string
                enum: [HBAR, TOKEN]
                description: Type of asset for payout
              amount:
                type: number
                minimum: 0
                description: Amount to pay out
              tokenId:
                type: string
                pattern: '^0\.0\.[0-9]+$'
                description: Token ID if assetType is TOKEN
            required: [recipientAccount, assetType, amount]
        requestedBy:
          type: string
          pattern: '^0\.0\.[0-9]+$'
          description: Account ID of the requester
        timestamp:
          type: string
          format: date-time
          description: Timestamp of the request
      required: [messageId, wellId, periodStart, periodEnd, kwhTotal, grossRevenue, payouts, requestedBy, timestamp]
      additionalProperties: false
    
    # Settlement Approve Schema
    SettlementApprove:
      type: object
      properties:
        messageId:
          type: string
          format: uuid
          description: Unique message identifier for idempotency
        settlementId:
          type: string
          description: Settlement identifier to approve
        approvedBy:
          type: string
          pattern: '^0\.0\.[0-9]+$'
          description: Account ID of the approver
        approvalNotes:
          type: string
          maxLength: 500
          description: Optional notes for the approval
        escrowTxId:
          type: string
          description: Transaction ID for escrow setup
        timestamp:
          type: string
          format: date-time
          description: Timestamp of the approval
      required: [messageId, settlementId, approvedBy, timestamp]
      additionalProperties: false
    
    # Settlement Execute Schema
    SettlementExecute:
      type: object
      properties:
        messageId:
          type: string
          format: uuid
          description: Unique message identifier for idempotency
        settlementId:
          type: string
          description: Settlement identifier to execute
        executedBy:
          type: string
          pattern: '^0\.0\.[0-9]+$'
          description: Account ID of the executor
        payoutTransactions:
          type: array
          items:
            type: object
            properties:
              recipientAccount:
                type: string
                pattern: '^0\.0\.[0-9]+$'
                description: Recipient account ID
              txId:
                type: string
                description: Transaction ID for the payout
              amount:
                type: number
                minimum: 0
                description: Amount paid out
              assetType:
                type: string
                enum: [HBAR, TOKEN]
                description: Type of asset paid out
              tokenId:
                type: string
                pattern: '^0\.0\.[0-9]+$'
                description: Token ID if assetType is TOKEN
              status:
                type: string
                enum: [SUCCESS, FAILED, PENDING]
                description: Status of the payout transaction
            required: [recipientAccount, txId, amount, assetType, status]
        timestamp:
          type: string
          format: date-time
          description: Timestamp of the execution
      required: [messageId, settlementId, executedBy, timestamp]
      additionalProperties: false
    
    # Anchor Document Schema
    AnchorDocument:
      type: object
      properties:
        messageId:
          type: string
          format: uuid
          description: Unique message identifier for idempotency
        wellId:
          type: string
          description: Well identifier
        documentType:
          type: string
          enum: [METER_READING, MAINTENANCE_REPORT, INSPECTION_CERTIFICATE, FINANCIAL_STATEMENT, COMPLIANCE_DOCUMENT, OTHER]
          description: Type of document being anchored
        cid:
          type: string
          pattern: '^Qm[1-9A-HJ-NP-Za-km-z]{44}$|^bafy[a-z2-7]{55}$'
          description: IPFS Content Identifier (CID)
        hfsFileId:
          type: string
          pattern: '^0\.0\.[0-9]+$'
          description: Hedera File Service file ID (optional)
        digestAlgo:
          type: string
          enum: [SHA256, SHA3-256, BLAKE2B]
          description: Hash algorithm used for document digest
        digestHex:
          type: string
          pattern: '^[a-fA-F0-9]{64}$'
          description: Hexadecimal hash digest of the document
        bundleContentBase64:
          type: string
          description: Base64 encoded content to be stored on HFS (optional)
        metadata:
          type: object
          description: Additional metadata for the document
      required: [messageId, wellId, documentType, digestAlgo, digestHex]
      additionalProperties: false
    
    # Common response schemas
    Error:
      type: object
      properties:
        error:
          type: string
          description: Error code
        message:
          type: string
          description: Human-readable error message
        details:
          type: object
          description: Additional error details
      required:
        - error
        - message
    
    ValidationError:
      type: object
      properties:
        error:
          type: string
          enum: [validation_error]
        message:
          type: string
        details:
          type: object
          properties:
            field:
              type: string
            code:
              type: string
            expected:
              type: string
      required:
        - error
        - message
    
    User:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        role:
          type: string
          enum: [ADMIN, OPERATOR, AGENT, INVESTOR, USER]
        hederaAccountId:
          type: string
          pattern: '^0\.0\.[0-9]+$'
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - username
        - role
    
    Well:
      type: object
      properties:
        id:
          type: string
        code:
          type: string
        name:
          type: string
        location:
          type: string
        topicId:
          type: string
          pattern: '^0\.0\.[0-9]+$'
        tokenId:
          type: string
          pattern: '^0\.0\.[0-9]+$'
        operatorUserId:
          type: string
        status:
          type: string
          enum: [ACTIVE, INACTIVE, MAINTENANCE]
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - code
        - name
        - location
        - topicId
        - operatorUserId
    
    WellEvent:
      type: object
      properties:
        id:
          type: string
        wellId:
          type: string
        eventType:
          type: string
        payload:
          type: object
        transactionId:
          type: string
        sequenceNumber:
          type: string
        timestamp:
          type: string
          format: date-time
      required:
        - id
        - wellId
        - eventType
        - payload
        - timestamp
    
    HealthCheck:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, unhealthy]
        timestamp:
          type: string
          format: date-time
        version:
          type: string
        environment:
          type: string
        services:
          type: object
          properties:
            database:
              type: object
              properties:
                status:
                  type: string
                  enum: [connected, disconnected, error]
                latency:
                  type: number
                error:
                  type: string
            hedera:
              type: object
              properties:
                network:
                  type: string
                mirrorNode:
                  type: object
                  properties:
                    status:
                      type: string
                      enum: [reachable, unreachable, error]
                    latency:
                      type: number
                    error:
                      type: string
        uptime:
          type: number
        memory:
          type: object
          properties:
            used:
              type: number
            total:
              type: number
            percentage:
              type: number
      required:
        - status
        - timestamp
        - version
        - environment
        - services
        - uptime
        - memory

paths:
  /api/auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user and create session
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: operator1
                password:
                  type: string
                  format: password
                  example: password123
              required:
                - username
                - password
            examples:
              operator_login:
                summary: Operator login
                value:
                  username: operator1
                  password: password123
              admin_login:
                summary: Admin login
                value:
                  username: admin
                  password: admin123
      responses:
        '200':
          description: Login successful
          headers:
            Set-Cookie:
              description: Session cookie
              schema:
                type: string
                example: session=eyJhbGciOiJIUzI1NiJ9...; Path=/; HttpOnly; SameSite=Strict
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  user:
                    $ref: '#/components/schemas/User'
              examples:
                success_response:
                  summary: Successful login
                  value:
                    success: true
                    user:
                      id: user_123
                      username: operator1
                      role: OPERATOR
                      hederaAccountId: "0.0.12345"
                      createdAt: "2024-01-01T00:00:00Z"
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                invalid_credentials:
                  summary: Invalid username or password
                  value:
                    error: invalid_credentials
                    message: Invalid username or password
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
              examples:
                missing_username:
                  summary: Missing username
                  value:
                    error: validation_error
                    message: Validation failed
                    details:
                      field: username
                      code: required
                      expected: string

  /api/auth/logout:
    post:
      tags:
        - Authentication
      summary: User logout
      description: Destroy user session
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Logged out successfully
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/me:
    get:
      tags:
        - Authentication
      summary: Get current user
      description: Get information about the currently authenticated user
      security:
        - cookieAuth: []
      responses:
        '200':
          description: User information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                current_user:
                  summary: Current user info
                  value:
                    id: user_123
                    username: operator1
                    role: OPERATOR
                    hederaAccountId: "0.0.12345"
                    createdAt: "2024-01-01T00:00:00Z"
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/hcs/events:
    post:
      tags:
        - HCS Events
      summary: Submit HCS event
      description: Submit an event to Hedera Consensus Service
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HCSEvent'
            examples:
              meter_reading:
                summary: Meter reading event
                value:
                  messageId: "550e8400-e29b-41d4-a716-446655440000"
                  wellId: "WELL_001"
                  topicId: "0.0.12345"
                  eventType: "METER_READING"
                  payload:
                    reading: 1250.5
                    unit: "kWh"
                    timestamp: "2024-01-01T12:00:00Z"
                  submittedBy: "0.0.67890"
                  memo: "Daily meter reading"
              valve_command:
                summary: Valve command event
                value:
                  messageId: "550e8400-e29b-41d4-a716-446655440001"
                  wellId: "WELL_001"
                  topicId: "0.0.12345"
                  eventType: "VALVE_COMMAND"
                  payload:
                    action: "OPEN"
                    percentage: 75
                    timestamp: "2024-01-01T12:00:00Z"
                  submittedBy: "0.0.67890"
                  memo: "Valve adjustment"
      responses:
        '201':
          description: Event submitted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  transactionId:
                    type: string
                    example: "0.0.12345@1640995200.123456789"
                  sequenceNumber:
                    type: string
                    example: "42"
                  messageId:
                    type: string
                    example: "550e8400-e29b-41d4-a716-446655440000"
              examples:
                 meter_reading_success:
                   summary: Meter reading published successfully
                   value:
                     success: true
                     transactionId: "0.0.12345@1640995200.123456789"
                     sequenceNumber: "42"
                     messageId: "550e8400-e29b-41d4-a716-446655440000"
                 valve_command_success:
                    summary: Valve command published successfully
                    value:
                      success: true
                      transactionId: "0.0.12345@1640995200.123456790"
                      sequenceNumber: "43"
                      messageId: "550e8400-e29b-41d4-a716-446655440001"
        '200':
          description: HCS event published successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  transactionId:
                    type: string
                    example: "0.0.12345@1640995200.123456789"
                  sequenceNumber:
                    type: string
                    example: "42"
                  messageId:
                    type: string
                    example: "550e8400-e29b-41d4-a716-446655440000"
              examples:
                hcs_success:
                  summary: HCS event published successfully
                  value:
                    success: true
                    transactionId: "0.0.12345@1640995200.123456789"
                    sequenceNumber: "42"
                    messageId: "550e8400-e29b-41d4-a716-446655440000"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                missing_idempotency:
                  summary: Missing idempotency key
                  value:
                    error: missing_idempotency_key
                    message: Idempotency key is required
                duplicate_message:
                  summary: Duplicate message ID
                  value:
                    error: duplicate_message_id
                    message: Message ID already exists
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                unauthorized:
                  summary: Authentication required
                  value:
                    error: unauthorized
                    message: Authentication required
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                insufficient_permissions:
                  summary: Insufficient permissions
                  value:
                    error: forbidden
                    message: Insufficient permissions to submit events for this well
        '404':
          description: Well not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                well_not_found:
                  summary: Well not found
                  value:
                    error: well_not_found
                    message: Well WELL_001 not found
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /api/wells:
    get:
      tags:
        - Wells
      summary: List wells
      description: Get a list of all wells
      security:
        - cookieAuth: []
      parameters:
        - name: limit
          in: query
          description: Maximum number of wells to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of wells to skip
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: status
          in: query
          description: Filter by well status
          schema:
            type: string
            enum: [ACTIVE, INACTIVE, MAINTENANCE]
      responses:
        '200':
          description: List of wells
          content:
            application/json:
              schema:
                type: object
                properties:
                  wells:
                    type: array
                    items:
                      $ref: '#/components/schemas/Well'
                  total:
                    type: integer
                    example: 50
                  limit:
                    type: integer
                    example: 20
                  offset:
                    type: integer
                    example: 0
              examples:
                wells_list:
                  summary: Wells list response
                  value:
                    wells:
                      - id: "well_123"
                        code: "WELL_001"
                        name: "North Field Well #1"
                        location: "North Field, Sector A"
                        topicId: "0.0.12345"
                        tokenId: "0.0.67890"
                        operatorUserId: "user_456"
                        status: "ACTIVE"
                        createdAt: "2024-01-01T00:00:00Z"
                    total: 50
                    limit: 20
                    offset: 0
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/wells/{id}/events:
    get:
      tags:
        - Wells
      summary: Get well events
      description: Get events for a specific well
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Well ID
          schema:
            type: string
            example: "well_123"
        - name: limit
          in: query
          description: Maximum number of events to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of events to skip
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: eventType
          in: query
          description: Filter by event type
          schema:
            type: string
            enum: [METER_READING, VALVE_COMMAND, DOC_ANCHORED, SETTLEMENT_REQUESTED, SETTLEMENT_APPROVED, SETTLEMENT_EXECUTED, TOKEN_MINTED, PAYOUT_DISTRIBUTED]
      responses:
        '200':
          description: List of well events
          content:
            application/json:
              schema:
                type: object
                properties:
                  events:
                    type: array
                    items:
                      $ref: '#/components/schemas/WellEvent'
                  total:
                    type: integer
                  limit:
                    type: integer
                  offset:
                    type: integer
              examples:
                well_events:
                  summary: Well events response
                  value:
                    events:
                      - id: "event_123"
                        wellId: "well_123"
                        eventType: "METER_READING"
                        payload:
                          reading: 1250.5
                          unit: "kWh"
                        transactionId: "0.0.12345@1640995200.123456789"
                        sequenceNumber: "42"
                        timestamp: "2024-01-01T12:00:00Z"
                    total: 100
                    limit: 20
                    offset: 0
        '404':
          description: Well not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/settlements/request:
    post:
      tags:
        - Settlements
      summary: Request settlement
      description: Create a new settlement request
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SettlementRequest'
            examples:
              settlement_request:
                summary: Settlement request
                value:
                  messageId: "550e8400-e29b-41d4-a716-446655440000"
                  wellId: "WELL_001"
                  periodStart: "2024-01-01T00:00:00Z"
                  periodEnd: "2024-01-31T23:59:59Z"
                  kwhTotal: 15000.5
                  grossRevenue: 7500.25
                  payouts:
                    - recipientAccount: "0.0.12345"
                      assetType: "HBAR"
                      amount: 5000.0
                    - recipientAccount: "0.0.67890"
                      assetType: "TOKEN"
                      amount: 1000.0
                      tokenId: "0.0.11111"
                  requestedBy: "0.0.54321"
                  timestamp: "2024-02-01T00:00:00Z"
      responses:
        '201':
          description: Settlement request created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  settlementId:
                    type: string
                    example: "settlement_123"
                  transactionId:
                    type: string
                    example: "0.0.12345@1640995200.123456789"
              examples:
                 settlement_created:
                   summary: Settlement request created successfully
                   value:
                     success: true
                     settlementId: "settlement_123"
                     transactionId: "0.0.12345@1640995200.123456789"
        '200':
          description: Settlement request created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  settlementId:
                    type: string
                    example: "settlement_123"
                  transactionId:
                    type: string
                    example: "0.0.12345@1640995200.123456789"
              examples:
                settlement_success:
                  summary: Settlement request created successfully
                  value:
                    success: true
                    settlementId: "settlement_123"
                    transactionId: "0.0.12345@1640995200.123456789"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
              examples:
                validation_error:
                  summary: Invalid settlement period
                  value:
                    error: "validation_error"
                    message: "Validation failed"
                    details:
                      - field: "periodStart"
                        message: "Period start date is required"
                      - field: "kwhTotal"
                        message: "Total kWh must be greater than 0"
        '409':
          description: Settlement already exists for period
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                duplicate_settlement:
                  summary: Settlement already exists
                  value:
                    error: "conflict"
                    message: "Settlement already exists for this period"
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /api/settlements/approve:
    post:
      tags:
        - Settlements
      summary: Approve settlement
      description: Approve a pending settlement
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SettlementApprove'
            examples:
              settlement_approve:
                summary: Settlement approval
                value:
                  messageId: "550e8400-e29b-41d4-a716-446655440001"
                  settlementId: "settlement_123"
                  approvedBy: "0.0.54321"
                  timestamp: "2024-02-01T12:00:00Z"
      responses:
        '200':
          description: Settlement approved
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  transactionId:
                    type: string
                    example: "0.0.12345@1640995200.123456789"
              examples:
                settlement_approved:
                  summary: Settlement approved successfully
                  value:
                    success: true
                    transactionId: "0.0.12345@1640995200.123456789"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
              examples:
                approval_validation_error:
                  summary: Invalid approval data
                  value:
                    error: "validation_error"
                    message: "Validation failed"
                    details:
                      - field: "approvalNotes"
                        message: "Approval notes are required"
                execution_validation_error:
                  summary: Invalid execution data
                  value:
                    error: "validation_error"
                    message: "Validation failed"
                    details:
                      - field: "payoutTransactions"
                        message: "At least one payout transaction is required"
        '404':
          description: Settlement not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                settlement_not_found:
                  summary: Settlement not found
                  value:
                    error: "not_found"
                    message: "Settlement not found"
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /api/settlements/execute:
    post:
      tags:
        - Settlements
      summary: Execute settlement
      description: Execute an approved settlement
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SettlementExecute'
            examples:
              settlement_execute:
                summary: Settlement execution
                value:
                  messageId: "550e8400-e29b-41d4-a716-446655440002"
                  settlementId: "settlement_123"
                  executedBy: "0.0.54321"
                  timestamp: "2024-02-01T18:00:00Z"
      responses:
        '200':
          description: Settlement executed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  transactionId:
                    type: string
                    example: "0.0.12345@1640995200.123456789"
                  payoutTransactions:
                    type: array
                    items:
                      type: object
                      properties:
                        recipientAccount:
                          type: string
                        transactionId:
                          type: string
                        amount:
                          type: number
              examples:
                settlement_executed:
                  summary: Settlement executed successfully
                  value:
                    success: true
                    transactionId: "0.0.12345@1640995200.123456789"
                    payoutTransactions:
                      - recipientAccount: "0.0.12345"
                        transactionId: "0.0.12345@1640995200.123456790"
                        amount: 5000.0
                      - recipientAccount: "0.0.67890"
                        transactionId: "0.0.12345@1640995200.123456791"
                        amount: 1000.0
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
              examples:
                execution_error:
                  summary: Settlement execution failed
                  value:
                    error: "execution_failed"
                    message: "Failed to execute settlement: Insufficient funds"
        '404':
          description: Settlement not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /api/documents/anchor:
    post:
      tags:
        - Documents
      summary: Anchor document
      description: Anchor a document to Hedera File Service and HCS
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnchorDocument'
            examples:
              anchor_document:
                summary: Document anchoring
                value:
                  messageId: "550e8400-e29b-41d4-a716-446655440000"
                  wellId: "WELL_001"
                  documentType: "METER_READING"
                  cid: "QmYwAPJzv5CZsnA625s3Xf2nemtYgPpHdWEz79ojWnPbdG"
                  digestAlgo: "SHA256"
                  digestHex: "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
                  bundleContentBase64: "SGVsbG8gV29ybGQ="
      responses:
        '201':
          description: Document anchored successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  documentId:
                    type: string
                    example: "doc_123"
                  hfsFileId:
                    type: string
                    example: "0.0.98765"
                  transactionId:
                    type: string
                    example: "0.0.12345@1640995200.123456789"
              examples:
                 document_anchored:
                   summary: Document anchored successfully
                   value:
                     success: true
                     documentId: "doc_123"
                     hfsFileId: "0.0.98765"
                     transactionId: "0.0.12345@1640995200.123456789"
        '200':
          description: Document anchored successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  documentId:
                    type: string
                    example: "doc_123"
                  hfsFileId:
                    type: string
                    example: "0.0.98765"
                  transactionId:
                    type: string
                    example: "0.0.12345@1640995200.123456789"
              examples:
                anchor_success:
                  summary: Document anchored successfully
                  value:
                    success: true
                    documentId: "doc_123"
                    hfsFileId: "0.0.98765"
                    transactionId: "0.0.12345@1640995200.123456789"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
              examples:
                validation_error:
                  summary: Invalid document data
                  value:
                    error: "validation_error"
                    message: "Validation failed"
                    details:
                      - field: "documentType"
                        message: "Document type is required"
                      - field: "cid"
                        message: "IPFS CID is required"
        '422':
          description: Validation error or digest mismatch
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - type: object
                    properties:
                      error:
                        type: string
                        enum: [digest_mismatch]
                      expected:
                        type: string
                      computed:
                        type: string
              examples:
                digest_mismatch:
                  summary: Digest mismatch
                  value:
                    error: digest_mismatch
                    expected: "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
                    computed: "a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3"

  /api/audit/reports:
    get:
      tags:
        - Audit
      summary: Get audit reports
      description: Retrieve audit reports for compliance and monitoring
      security:
        - cookieAuth: []
      parameters:
        - name: wellId
          in: query
          description: Filter by well ID
          schema:
            type: string
        - name: startDate
          in: query
          description: Start date for report period
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          description: End date for report period
          schema:
            type: string
            format: date
        - name: reportType
          in: query
          description: Type of audit report
          schema:
            type: string
            enum: [FINANCIAL, OPERATIONAL, COMPLIANCE, SECURITY]
      responses:
        '200':
          description: Audit reports
          content:
            application/json:
              schema:
                type: object
                properties:
                  reports:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        reportType:
                          type: string
                        wellId:
                          type: string
                        periodStart:
                          type: string
                          format: date-time
                        periodEnd:
                          type: string
                          format: date-time
                        summary:
                          type: object
                        createdAt:
                          type: string
                          format: date-time
                  total:
                    type: integer
              examples:
                audit_reports:
                  summary: Audit reports response
                  value:
                    reports:
                      - id: "report_123"
                        reportType: "FINANCIAL"
                        wellId: "WELL_001"
                        periodStart: "2024-01-01T00:00:00Z"
                        periodEnd: "2024-01-31T23:59:59Z"
                        summary:
                          totalRevenue: 7500.25
                          totalPayouts: 6000.0
                          transactionCount: 150
                        createdAt: "2024-02-01T00:00:00Z"
                    total: 1
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/meta/links:
    get:
      tags:
        - Metadata
      summary: Get metadata links
      description: Get links to external resources and metadata
      responses:
        '200':
          description: Metadata links
          content:
            application/json:
              schema:
                type: object
                properties:
                  links:
                    type: object
                    properties:
                      hederaNetwork:
                        type: string
                        example: "testnet"
                      mirrorNode:
                        type: string
                        example: "https://testnet.mirrornode.hedera.com"
                      explorer:
                        type: string
                        example: "https://hashscan.io/testnet"
                      documentation:
                        type: string
                        example: "https://docs.waternity.io"
                      support:
                        type: string
                        example: "https://support.waternity.io"
              examples:
                meta_links:
                  summary: Metadata links response
                  value:
                    links:
                      hederaNetwork: "testnet"
                      mirrorNode: "https://testnet.mirrornode.hedera.com"
                      explorer: "https://hashscan.io/testnet"
                      documentation: "https://docs.waternity.io"
                      support: "https://support.waternity.io"

  /api/health:
    get:
      tags:
        - System
      summary: Health check
      description: Get system health status
      responses:
        '200':
          description: System is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheck'
              examples:
                healthy_system:
                  summary: Healthy system response
                  value:
                    status: "healthy"
                    timestamp: "2024-01-01T12:00:00Z"
                    version: "1.0.0"
                    environment: "development"
                    services:
                      database:
                        status: "connected"
                        latency: 15
                      hedera:
                        network: "testnet"
                        mirrorNode:
                          status: "reachable"
                          latency: 120
                    uptime: 86400
                    memory:
                      used: 512000000
                      total: 1073741824
                      percentage: 47.7
        '503':
          description: System is unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheck'
              examples:
                unhealthy_system:
                  summary: Unhealthy system response
                  value:
                    status: "unhealthy"
                    timestamp: "2024-01-01T12:00:00Z"
                    version: "1.0.0"
                    environment: "development"
                    services:
                      database:
                        status: "error"
                        error: "Connection timeout"
                      hedera:
                        network: "testnet"
                        mirrorNode:
                          status: "unreachable"
                          error: "Network error"
                    uptime: 86400
                    memory:
                      used: 512000000
                      total: 1073741824
                      percentage: 47.7

tags:
  - name: Authentication
    description: User authentication and session management
  - name: HCS Events
    description: Hedera Consensus Service event operations
  - name: Wells
    description: Water well management and monitoring
  - name: Settlements
    description: Financial settlement operations
  - name: Documents
    description: Document anchoring and verification
  - name: Audit
    description: Audit reports and compliance
  - name: Metadata
    description: System metadata and external links
  - name: System
    description: System health and monitoring