datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          String  @id @default(cuid())
  name        String
  accountId   String?
  walletEvm   String?
  role        String
  createdAt   DateTime @default(now())
  wells       Well[]
  memberships WellMembership[]
}

model Well {
  id          String   @id @default(cuid())
  code        String   @unique
  name        String
  location    String
  topicId     String
  tokenId     String?
  operator    User     @relation(fields: [operatorUserId], references: [id])
  operatorUserId String
  createdAt   DateTime @default(now())
  memberships WellMembership[]
  events      HcsEvent[]
  documents   Document[]
  settlements Settlement[]
  tokens      Token[]

  @@index([topicId])
}

model WellMembership {
  id       String @id @default(cuid())
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  well     Well   @relation(fields: [wellId], references: [id])
  wellId   String
  roleName String
  shareBps Int?

  @@unique([userId, wellId, roleName])
}

model HcsEvent {
  id              String      @id @default(cuid())
  well            Well        @relation(fields: [wellId], references: [id])
  wellId          String
  type            String
  messageId       String      @unique
  consensusTime   DateTime?
  sequenceNumber  BigInt?
  txId            String?
  payloadJson     String
  runningHash     String?
  createdAt       DateTime    @default(now())
  anchors         Anchor[]
  documents       Document[]

  @@index([wellId, consensusTime])
}

model Document {
  id            String    @id @default(cuid())
  well          Well      @relation(fields: [wellId], references: [id])
  wellId        String
  type          String
  cid           String
  hfsFileId     String?
  anchoredEvent HcsEvent? @relation(fields: [anchoredEventId], references: [id])
  anchoredEventId String?
  createdAt     DateTime  @default(now())
}

model Settlement {
  id             String   @id @default(cuid())
  well           Well     @relation(fields: [wellId], references: [id])
  wellId         String
  periodStart    DateTime
  periodEnd      DateTime
  kwhTotal       Float
  grossRevenue   Float
  status         String
  requestEventId  String?
  approvalEventId String?
  executeEventId  String?
  escrowTxId     String?
  createdAt      DateTime @default(now())
  payouts        Payout[]
}

model Payout {
  id               String    @id @default(cuid())
  settlement       Settlement @relation(fields: [settlementId], references: [id])
  settlementId     String
  recipientAccount String
  assetType        String
  amount           Float
  tokenId          String?
  txId             String?
  status           String
  createdAt        DateTime  @default(now())

  @@unique([settlementId, recipientAccount, assetType])
}

model Token {
  id              String    @id @default(cuid())
  well            Well      @relation(fields: [wellId], references: [id])
  wellId          String
  tokenId         String    @unique
  type            String
  name            String
  symbol          String
  treasuryAccount String
  decimals        Int
  createdAt       DateTime  @default(now())
}

model Anchor {
  id          String   @id @default(cuid())
  sourceType  String
  sourceId    String
  hcsEvent    HcsEvent @relation(fields: [hcsEventId], references: [id])
  hcsEventId  String
  digestAlgo  String
  digestHex   String
  createdAt   DateTime @default(now())
}