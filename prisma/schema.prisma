// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String   @db.VarChar(255)
  walletEvm String   @unique @db.VarChar(42) // Ethereum-style address
  email     String?  @unique @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz
  isActive  Boolean  @default(true) @map("is_active")

  // Relations
  operatedWells   Well[]           @relation("WellOperator")
  memberships     WellMembership[]
  uploadedDocs    Document[]       @relation("DocumentUploader")
  receivedPayouts Payout[]         @relation("PayoutRecipient")

  @@index([walletEvm])
  @@index([email])
  @@index([createdAt])
  @@map("users")
}

model Role {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @unique @db.VarChar(50)
  description String?
  permissions Json?
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  memberships WellMembership[]

  @@map("roles")
}

model Well {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code             String   @unique @db.VarChar(20) // e.g., WL-001
  name             String   @db.VarChar(255)
  location         String
  latitude         Decimal? @db.Decimal(10, 8)
  longitude        Decimal? @db.Decimal(11, 8)
  topicId          String   @map("topic_id") @db.VarChar(100) // HCS Topic ID
  tokenId          String?  @map("token_id") @db.VarChar(100) // HTS Token ID
  operatorUserId   String   @map("operator_user_id") @db.Uuid
  depth            Decimal? @db.Decimal(8, 2)
  capacity         Decimal? @db.Decimal(12, 2) // liters per hour
  status           String   @default("ACTIVE") @db.VarChar(20)
  createdAt        DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt        DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  operator    User             @relation("WellOperator", fields: [operatorUserId], references: [id], onDelete: Restrict)
  memberships WellMembership[]
  events      HcsEvent[]
  documents   Document[]
  settlements Settlement[]
  tokens      Token[]

  @@index([code])
  @@index([operatorUserId])
  @@index([topicId])
  @@index([tokenId])
  @@index([createdAt])
  @@map("wells")
}

model WellMembership {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  wellId    String   @map("well_id") @db.Uuid
  roleName  String   @map("role_name") @db.VarChar(50)
  shareBps  Int?     @map("share_bps") // basis points (0-10000 = 0%-100%)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  well Well @relation(fields: [wellId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleName], references: [name], onDelete: Restrict)

  @@unique([userId, wellId, roleName])
  @@index([userId])
  @@index([wellId])
  @@index([roleName])
  @@index([createdAt])
  @@map("well_memberships")
}

model HcsEvent {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  wellId          String   @map("well_id") @db.Uuid
  type            String   @db.VarChar(50) // MILESTONE_VERIFIED, SETTLEMENT_REQUESTED, etc.
  messageId       String   @unique @map("message_id") @db.VarChar(100) // Hedera message ID
  consensusTime   DateTime @map("consensus_time") @db.Timestamptz // Hedera consensus timestamp
  sequenceNumber  BigInt   @map("sequence_number") // HCS sequence number
  txId            String?  @map("tx_id") @db.VarChar(100) // Hedera transaction ID
  payloadJson     Json     @map("payload_json") // Event payload data
  hash            String?  @db.VarChar(64) // SHA-256 hash
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  well                Well         @relation(fields: [wellId], references: [id], onDelete: Cascade)
  anchoredDocuments   Document[]   @relation("DocumentAnchor")
  requestedSettlement Settlement[] @relation("SettlementRequest")
  executedSettlement  Settlement[] @relation("SettlementExecution")
  anchors             Anchor[]

  @@index([messageId])
  @@index([wellId, consensusTime(sort: Desc), sequenceNumber(sort: Desc)])
  @@index([type, consensusTime(sort: Desc)])
  @@index([consensusTime(sort: Desc)])
  @@index([sequenceNumber(sort: Desc)])
  @@index([createdAt])
  @@map("hcs_events")
}

model Document {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  wellId           String    @map("well_id") @db.Uuid
  type             String    @db.VarChar(50) // CONTRACT, PERMIT, REPORT, PHOTO, etc.
  title            String    @db.VarChar(255)
  description      String?
  cid              String    @db.VarChar(100) // IPFS Content ID
  hfsFileId        String?   @map("hfs_file_id") @db.VarChar(100) // Hedera File Service ID
  anchoredEventId  String?   @map("anchored_event_id") @db.Uuid
  uploadedBy       String    @map("uploaded_by") @db.Uuid
  fileSize         BigInt?   @map("file_size")
  mimeType         String?   @map("mime_type") @db.VarChar(100)
  checksum         String?   @db.VarChar(64) // SHA-256 checksum
  createdAt        DateTime  @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  well          Well      @relation(fields: [wellId], references: [id], onDelete: Cascade)
  anchoredEvent HcsEvent? @relation("DocumentAnchor", fields: [anchoredEventId], references: [id], onDelete: SetNull)
  uploader      User      @relation("DocumentUploader", fields: [uploadedBy], references: [id], onDelete: Restrict)

  @@index([wellId])
  @@index([type])
  @@index([cid])
  @@index([hfsFileId])
  @@index([anchoredEventId])
  @@index([createdAt])
  @@map("documents")
}

model Settlement {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  wellId           String    @map("well_id") @db.Uuid
  periodStart      DateTime  @map("period_start") @db.Timestamptz
  periodEnd        DateTime  @map("period_end") @db.Timestamptz
  kwhTotal         Decimal   @default(0) @map("kwh_total") @db.Decimal(15, 4) // Total energy generated
  grossRevenue     Decimal   @default(0) @map("gross_revenue") @db.Decimal(18, 8) // Total revenue in HBAR
  netRevenue       Decimal   @default(0) @map("net_revenue") @db.Decimal(18, 8) // After operational costs
  operationalCosts Decimal   @default(0) @map("operational_costs") @db.Decimal(18, 8)
  status           String    @default("DRAFT") @db.VarChar(20)
  requestEventId   String?   @map("request_event_id") @db.Uuid
  executeEventId   String?   @map("execute_event_id") @db.Uuid
  escrowTxId       String?   @map("escrow_tx_id") @db.VarChar(100) // Hedera escrow transaction ID
  calculatedAt     DateTime? @map("calculated_at") @db.Timestamptz
  executedAt       DateTime? @map("executed_at") @db.Timestamptz
  createdAt        DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt        DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  well         Well      @relation(fields: [wellId], references: [id], onDelete: Cascade)
  requestEvent HcsEvent? @relation("SettlementRequest", fields: [requestEventId], references: [id], onDelete: SetNull)
  executeEvent HcsEvent? @relation("SettlementExecution", fields: [executeEventId], references: [id], onDelete: SetNull)
  payouts      Payout[]

  @@unique([wellId, periodStart, periodEnd])
  @@index([wellId, periodStart(sort: Desc), periodEnd(sort: Desc)])
  @@index([status])
  @@index([periodStart(sort: Desc)])
  @@index([periodEnd(sort: Desc)])
  @@index([createdAt])
  @@index([executedAt])
  @@map("settlements")
}

model Payout {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  settlementId    String    @map("settlement_id") @db.Uuid
  recipientWallet String    @map("recipient_wallet") @db.VarChar(42) // Ethereum-style address
  recipientUserId String?   @map("recipient_user_id") @db.Uuid // Optional user reference
  assetType       String    @map("asset_type") @db.VarChar(10) // HBAR or TOKEN
  amount          Decimal   @db.Decimal(18, 8)
  tokenId         String?   @map("token_id") @db.VarChar(100) // Required if assetType = TOKEN
  txId            String?   @map("tx_id") @db.VarChar(100) // Hedera transaction ID
  status          String    @default("PENDING") @db.VarChar(20)
  executedAt      DateTime? @map("executed_at") @db.Timestamptz
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt       DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  settlement    Settlement @relation(fields: [settlementId], references: [id], onDelete: Cascade)
  recipientUser User?      @relation("PayoutRecipient", fields: [recipientUserId], references: [id], onDelete: SetNull)

  @@unique([settlementId, recipientWallet, assetType, tokenId])
  @@index([settlementId])
  @@index([recipientWallet])
  @@index([status])
  @@index([assetType])
  @@index([tokenId])
  @@index([createdAt])
  @@index([executedAt])
  @@map("payouts")
}

model Token {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  wellId            String   @map("well_id") @db.Uuid
  tokenId           String   @unique @map("token_id") @db.VarChar(100) // HTS Token ID
  type              String   @db.VarChar(10) // HTS_FT or HTS_NFT
  name              String   @db.VarChar(100)
  symbol            String   @db.VarChar(10)
  treasuryAccount   String   @map("treasury_account") @db.VarChar(42) // Hedera account ID
  decimals          Int      @default(0)
  totalSupply       Decimal  @default(0) @map("total_supply") @db.Decimal(28, 18)
  circulatingSupply Decimal  @default(0) @map("circulating_supply") @db.Decimal(28, 18)
  createdAt         DateTime @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  well Well @relation(fields: [wellId], references: [id], onDelete: Cascade)

  @@index([tokenId])
  @@index([wellId])
  @@index([type])
  @@index([treasuryAccount])
  @@index([createdAt])
  @@map("tokens")
}

model Anchor {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sourceType  String   @map("source_type") @db.VarChar(20) // DOCUMENT, SETTLEMENT, METER_READING
  sourceId    String   @map("source_id") @db.Uuid // References id from source table
  hcsEventId  String   @map("hcs_event_id") @db.Uuid
  digestAlgo  String   @default("SHA256") @map("digest_algo") @db.VarChar(10)
  digestHex   String   @map("digest_hex") @db.VarChar(128) // Hex-encoded digest
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  hcsEvent HcsEvent @relation(fields: [hcsEventId], references: [id], onDelete: Cascade)

  @@unique([sourceType, sourceId])
  @@index([sourceType, sourceId])
  @@index([hcsEventId])
  @@index([createdAt])
  @@map("anchors")
}

enum WellStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
}

enum SettlementStatus {
  DRAFT
  REQUESTED
  APPROVED
  EXECUTED
  FAILED
}

enum PayoutStatus {
  PENDING
  EXECUTED
  FAILED
  CANCELLED
}

enum AssetType {
  HBAR
  TOKEN
}

enum TokenType {
  HTS_FT
  HTS_NFT
}

enum AnchorSourceType {
  DOCUMENT
  SETTLEMENT
  METER_READING
}

enum DigestAlgorithm {
  SHA256
  SHA512
}

enum RoleName {
  INVESTOR
  OPERATOR
  AGENT
  ADMIN
}